@using AdminPortal.Models
@using global::Shared.Models.Auth
@inherits BaseComponent


<MudDialog>
    <DialogContent>
        <MudDropContainer T="DropItem" Items="Items" ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudDropZone T="DropItem" Identifier="@nameof(GetUsersAndRolesResponseModel.Unassigned)" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Unassigned</MudText>
                </MudDropZone>
                <MudDropZone T="DropItem" Identifier="@nameof(GetUsersAndRolesResponseModel.Assigned)" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Assigned</MudText>
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public GetUsersAndRolesResponseModel Model { get; set; }

    private List<DropItem> Items { get; set; } = new();
    
    protected override void OnInitialized()
    {
        foreach(var role in Model.Assigned)
            Items.Add(new DropItem()
            {
                Identifier = nameof(GetUsersAndRolesResponseModel.Assigned),
                Name = role
            });
        
        foreach(var role in Model.Unassigned)
            Items.Add(new DropItem()
            {
                Identifier = nameof(GetUsersAndRolesResponseModel.Unassigned),
                Name = role
            });
    }

    private async Task Submit()
    {
        var success = await ExecuteHttpService<bool>(async x => await x.PostAsync(url => url.Authentication.UpdateUserRoles, new UpdateUserRolesRequestModel()
        {
            UserId = Model.UserId,
            AssignedRoles = Items.Where(z => z.Identifier == nameof(GetUsersAndRolesResponseModel.Assigned)).Select(z => z.Name).ToList(),
            UnassignedRoles =  Items.Where(z => z.Identifier == nameof(GetUsersAndRolesResponseModel.Unassigned)).Select(z => z.Name).ToList()
        }));

        if (success)
        {
            ToastSuccess("User roles updated");
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private void Cancel() => MudDialog.Cancel();
    
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }


}