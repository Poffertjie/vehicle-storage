@using global::Shared.Models.ServiceAdvisor
@using global::Shared.Models.Vehicles
@using AdminPortal.Components.Pages.CustomerDashboardComponents.Tabs
@using global::Shared.Models.Customer
@inherits BaseComponent

<MudForm @ref="form" Spacing="5">
    @if (Model is not null)
    {
        <UpsertCustomerVehicleTab Model="Model" ServiceAdvisors="ServiceAdvisors" Brand="Model.BrandId" BrandModel="Model.BrandModelId" BrandModelVariant="Model.BrandModelVariantId" />
        <MudStack Row="true" Justify="Justify.FlexEnd" Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Info" DropShadow="false" OnClick="Validate">Update</MudButton>
        </MudStack>
    }
</MudForm>

@code {
    
    [Parameter]
    public int CustomerVehicleId { get; set; }
    
    private GetCustomerVehicle? Model { get; set; }
    private IEnumerable<GetServiceAdvisorResponseModel>? ServiceAdvisors { get; set; }
    
    MudForm form;
    protected override async Task OnInitializedAsync()
    {
        Model = await ExecuteHttpService<GetCustomerVehicle>(async x => await x.GetAsync(url => url.CustomerVehicle.GetCustomerVehicleForUpdate(CustomerVehicleId)));
        
        ServiceAdvisors = await ExecuteHttpService<IEnumerable<GetServiceAdvisorResponseModel>>(async x => await x.GetAsync(url => url.ServiceAdvisor.GetServiceAdvisors));
    }
    
 
    private async Task Validate()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var success = await ExecuteHttpService<bool>(async x => await x.PostAsync(url => url.CustomerVehicle.UpdateCustomerVehicle, Model));

            if (success)
                ToastSuccess("Customer vehicle updated");
        }
        
    }
}