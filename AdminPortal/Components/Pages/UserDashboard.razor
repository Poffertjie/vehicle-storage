@page "/users"
@using global::Shared.Models.Auth
@inherits BaseComponent
@attribute [Authorize(Roles = nameof(RolesEnum.Admin))]
<PageTitle>Users</PageTitle>
<MudDataGrid @ref="dataGrid" T="GetUsersAndRolesResponseModel" Filterable="false" ServerData="ServerReload" Class="mt-2">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudIconButton Icon="@Icons.Material.Rounded.AddCircle" Color="Color.Info" Size="Size.Large" OnClick="OpenAddUserDialogue"/>
        <MudSpacer/>
        <MudTextField ValueChanged="@(s => OnSearch(s))" T="string" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.FullName" Title="Full Name"/>
        <PropertyColumn Property="x => x.Email"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" Size="Size.Large" OnClick="() => OpenRolesDialogue(context.Item)">Roles</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetUsersAndRolesResponseModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<GetUsersAndRolesResponseModel> dataGrid;
    string searchString = "";

    private IEnumerable<GetUsersAndRolesResponseModel>? Data { get; set; }

    private async Task<GridData<GetUsersAndRolesResponseModel>> ServerReload(GridState<GetUsersAndRolesResponseModel> state)
    {
        Data ??= await ExecuteHttpService<IEnumerable<GetUsersAndRolesResponseModel>>(async x =>
            await x.GetAsync(url => url.Authentication.GetUsersAndRoles));

        if (Data is not null)
        {
            var pagedData = Data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
            return new GridData<GetUsersAndRolesResponseModel> {
                TotalItems = Data.Count(),
                Items = pagedData
            };
        }

        return new GridData<GetUsersAndRolesResponseModel>();
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task OpenRolesDialogue(GetUsersAndRolesResponseModel user)
    {
        var parameters = new DialogParameters<RolesDialogue>
        {
            { x => x.Model, user },
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = await DialogService.ShowAsync<RolesDialogue>("Roles", parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }

    private async Task OpenAddUserDialogue()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddUserDialogue>("Add User", options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }


}